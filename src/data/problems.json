[
  {
    "problemId": "two-sum",
    "title": "Two Sum",
    "difficulty": "easy",
    "startingCode": {
      "typescript": "function twoSum(nums: number[], target: number): number[] {\n  const lookup: Record<number, number> = {};\n  for (let i = 0; i < nums.length; i++) {\n    const diff = target - nums[i];\n    if (lookup[diff] !== undefined) {\n      return [lookup[diff], i];\n    }\n    lookup[nums[i]] = i;\n  }\n  return [];\n}\n",
      "python": "def two_sum(nums, target):\n    lookup = {}\n    for i, n in enumerate(nums):\n        if target - n in lookup:\n            return [lookup[target - n], i]\n        lookup[n] = i\n    return []\n"
    },
    "testHarness": {
      "typescript": "function runTests() {\n  const testCases: { args: [number[], number]; expected: number[] }[] = [\n    { args: [[2, 7, 11, 15], 9], expected: [0, 1] },\n    { args: [[3, 2, 4], 6], expected: [1, 2] },\n    { args: [[3, 3], 6], expected: [0, 1] },\n    { args: [[1, 2, 3], 7], expected: [] },\n  ];\n\n  testCases.forEach((tc, i) => {\n    const result = twoSum(...tc.args);\n    console.log(\n      \"Case \" + (i + 1) + \": \" +\n      (JSON.stringify(result) === JSON.stringify(tc.expected) ? \"PASS\" : \"FAIL\") +\n      \" | Got \" + JSON.stringify(result) +\n      \", Expected \" + JSON.stringify(tc.expected)\n    );\n  });\n}\n\nrunTests();\n",
      "python": "def run_tests():\n    test_cases = [\n        (([2,7,11,15], 9), [0,1]),\n        (([3,2,4], 6), [1,2]),\n        (([3,3], 6), [0,1]),\n        (([1,2,3], 7), []),\n    ]\n    for i, (args, expected) in enumerate(test_cases, 1):\n        result = two_sum(*args)\n        print(f\"Case {i}: {'PASS' if result == expected else 'FAIL'} | Got {result}, Expected {expected}\")\n\nrun_tests()\n"
    }
  },
  {
    "problemId": "reverse-linked-list",
    "title": "Reverse Linked List",
    "difficulty": "easy",
    "startingCode": {
      "typescript": "type ListNode = { val: number; next: ListNode | null };\n\nfunction reverseList(head: ListNode | null): ListNode | null {\n  let prev: ListNode | null = null;\n  let curr: ListNode | null = head;\n  while (curr) {\n    const next = curr.next;\n    curr.next = prev;\n    prev = curr;\n    curr = next;\n  }\n  return prev;\n}\n",
      "python": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_list(head: 'ListNode | None') -> 'ListNode | None':\n    prev = None\n    curr = head\n    while curr:\n        nxt = curr.next\n        curr.next = prev\n        prev = curr\n        curr = nxt\n    return prev\n"
    },
    "testHarness": {
      "typescript": "function fromArray(arr: number[]): any {\n  let dummy: any = { val: 0, next: null };\n  let tail = dummy;\n  for (const v of arr) {\n    tail.next = { val: v, next: null };\n    tail = tail.next;\n  }\n  return dummy.next;\n}\n\nfunction toArray(head: any): number[] {\n  const out: number[] = [];\n  let curr = head;\n  while (curr) {\n    out.push(curr.val);\n    curr = curr.next;\n  }\n  return out;\n}\n\nfunction runTests() {\n  const testCases = [\n    { input: [], expected: [] },\n    { input: [1], expected: [1] },\n    { input: [1,2,3,4,5], expected: [5,4,3,2,1] },\n    { input: [2,2,2], expected: [2,2,2] }\n  ];\n\n  testCases.forEach((tc, i) => {\n    const head = fromArray(tc.input);\n    const out = reverseList(head);\n    const arr = toArray(out);\n    const pass = JSON.stringify(arr) === JSON.stringify(tc.expected);\n    console.log(\n      'Case ' + (i + 1) + ': ' + (pass ? 'PASS' : 'FAIL') +\n      ' | Got ' + JSON.stringify(arr) + ', Expected ' + JSON.stringify(tc.expected)\n    );\n  });\n}\n\nrunTests();\n",
      "python": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef from_array(arr):\n    dummy = ListNode(0)\n    tail = dummy\n    for v in arr:\n        tail.next = ListNode(v)\n        tail = tail.next\n    return dummy.next\n\ndef to_array(head):\n    out = []\n    curr = head\n    while curr:\n        out.append(curr.val)\n        curr = curr.next\n    return out\n\n# reverse_list is implemented in startingCode\n\ndef run_tests():\n    tests = [\n        ([], []),\n        ([1], [1]),\n        ([1,2,3,4,5], [5,4,3,2,1]),\n        ([2,2,2], [2,2,2])\n    ]\n    for i, (inp, expected) in enumerate(tests, 1):\n        head = from_array(inp)\n        out = reverse_list(head)\n        arr = to_array(out)\n        print(f\"Case {i}: {'PASS' if arr == expected else 'FAIL'} | Got {arr}, Expected {expected}\")\n\nrun_tests()\n"
    }
  }
]
